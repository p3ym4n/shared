// Code generated by mockery v2.16.0. DO NOT EDIT.

package logtest

import (
	log2 "log"

	log "github.com/p3ym4n/shared/log"

	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// Debug provides a mock function with given fields: msg, args
func (_m *Logger) Debug(msg string, args map[string]interface{}) {
	_m.Called(msg, args)
}

// Error provides a mock function with given fields: msg, args
func (_m *Logger) Error(msg string, args map[string]interface{}) {
	_m.Called(msg, args)
}

// Fatal provides a mock function with given fields: msg, args
func (_m *Logger) Fatal(msg string, args map[string]interface{}) {
	_m.Called(msg, args)
}

// GetFormat provides a mock function with given fields:
func (_m *Logger) GetFormat() log.Format {
	ret := _m.Called()

	var r0 log.Format
	if rf, ok := ret.Get(0).(func() log.Format); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(log.Format)
	}

	return r0
}

// GetLevel provides a mock function with given fields:
func (_m *Logger) GetLevel() log.Level {
	ret := _m.Called()

	var r0 log.Level
	if rf, ok := ret.Get(0).(func() log.Level); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(log.Level)
	}

	return r0
}

// GetStd provides a mock function with given fields:
func (_m *Logger) GetStd() *log2.Logger {
	ret := _m.Called()

	var r0 *log2.Logger
	if rf, ok := ret.Get(0).(func() *log2.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*log2.Logger)
		}
	}

	return r0
}

// Info provides a mock function with given fields: msg, args
func (_m *Logger) Info(msg string, args map[string]interface{}) {
	_m.Called(msg, args)
}

// Log provides a mock function with given fields: level, msg, args
func (_m *Logger) Log(level log.Level, msg string, args map[string]interface{}) {
	_m.Called(level, msg, args)
}

// LogMsg provides a mock function with given fields: level, msg
func (_m *Logger) Msg(level log.Level, msg string) {
	_m.Called(level, msg)
}

type mockConstructorTestingTNewLogger interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogger(t mockConstructorTestingTNewLogger) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
